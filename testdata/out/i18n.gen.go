// Code generated by i18ngen. DO NOT EDIT.
package i18n

import (
	"bytes"
	"fmt"
	"text/template"
)

// Primary locale for fallback (first locale in configuration)
const primaryLocale = "ja"

// renderTemplate renders a message template with the given parameters
func renderTemplate(locale, messageID string, tmpl map[string]string, params map[string]string) string {
	templateStr, exists := tmpl[locale]
	if !exists {
		// Fallback to primary locale if locale not found
		templateStr, exists = tmpl[primaryLocale]
		if !exists {
			// Fallback to any available locale
			for _, t := range tmpl {
				templateStr = t
				break
			}
		}
	}

	if templateStr == "" {
		return fmt.Sprintf("[Missing template: %s.%s]", messageID, locale)
	}

	t, err := template.New(messageID).Parse(templateStr)
	if err != nil {
		return fmt.Sprintf("[Template parse error: %s]", err.Error())
	}

	var buf bytes.Buffer
	err = t.Execute(&buf, params)
	if err != nil {
		return fmt.Sprintf("[Template execution error: %s]", err.Error())
	}

	return buf.String()
}

// Message templates
var templates = map[string]map[string]string{
	"400BadRequest": {
		"en": `Bad request: {{.reason}}`,
		"ja": `不正なリクエストです: {{.reason}}`,
	},
	"EntityNotFound": {
		"en": `{{.entity}} not found: {{.reason}}`,
		"ja": `{{.entity}}が見つかりません: {{.reason}}`,
	},
	"UserAlreadyExists": {
		"en": `{{.entity}} already exists: {{.user_id}}`,
		"ja": `{{.entity}}はすでに存在します: {{.user_id}}`,
	},
}

// entity templates
var entityTemplates = map[string]map[string]string{
	"product": {
		"en": "Product",
		"ja": "製品",
	},
	"user": {
		"en": "User",
		"ja": "ユーザー",
	},
}

// reason templates
var reasonTemplates = map[string]map[string]string{
	"already_deleted": {
		"en": "already deleted",
		"ja": "すでに削除されています",
	},
}

// Localizable interface for all i18n types
type Localizable interface {
	Localize(locale string) string
}

type EntityText struct {
	ID string
}

// NewEntityText creates a new EntityText instance
func NewEntityText(id string) EntityText {
	return EntityText{ID: id}
}

func (p EntityText) Localize(locale string) string {
	templates, exists := entityTemplates[p.ID]
	if !exists {
		return fmt.Sprintf("[Missing EntityText ID: %s]", p.ID)
	}

	result, exists := templates[locale]
	if !exists {
		// Fallback to primary locale if locale not found
		result, exists = templates[primaryLocale]
		if !exists {
			// Fallback to any available locale
			for _, t := range templates {
				result = t
				break
			}
		}
	}

	if result == "" {
		return fmt.Sprintf("[Missing EntityText template: %s.%s]", p.ID, locale)
	}

	return result
}

// EntityTexts provides utility access to EntityText instances.
//
// This utility struct contains pre-defined instances for common use cases.
// Each field provides access to localized text values.
//
// Available instances:
//   - User: "user"
//   - Product: "product"
var EntityTexts = struct {
	// User represents "user"
	//
	// Localized values:
	//   • [en] "User"
	//   • [ja] "ユーザー"
	User EntityText
	// Product represents "product"
	//
	// Localized values:
	//   • [en] "Product"
	//   • [ja] "製品"
	Product EntityText
}{
	User:    EntityText{ID: "user"},
	Product: EntityText{ID: "product"},
}

type ReasonText struct {
	ID string
}

// NewReasonText creates a new ReasonText instance
func NewReasonText(id string) ReasonText {
	return ReasonText{ID: id}
}

func (p ReasonText) Localize(locale string) string {
	templates, exists := reasonTemplates[p.ID]
	if !exists {
		return fmt.Sprintf("[Missing ReasonText ID: %s]", p.ID)
	}

	result, exists := templates[locale]
	if !exists {
		// Fallback to primary locale if locale not found
		result, exists = templates[primaryLocale]
		if !exists {
			// Fallback to any available locale
			for _, t := range templates {
				result = t
				break
			}
		}
	}

	if result == "" {
		return fmt.Sprintf("[Missing ReasonText template: %s.%s]", p.ID, locale)
	}

	return result
}

// ReasonTexts provides utility access to ReasonText instances.
//
// This utility struct contains pre-defined instances for common use cases.
// Each field provides access to localized text values.
//
// Available instances:
//   - AlreadyDeleted: "already_deleted"
var ReasonTexts = struct {
	// AlreadyDeleted represents "already_deleted"
	//
	// Localized values:
	//   • [en] "already deleted"
	//   • [ja] "すでに削除されています"
	AlreadyDeleted ReasonText
}{
	AlreadyDeleted: ReasonText{ID: "already_deleted"},
}

type UserIdValue struct {
	Value string
}

// NewUserIdValue creates a new UserIdValue instance
func NewUserIdValue(value string) UserIdValue {
	return UserIdValue{Value: value}
}

func (p UserIdValue) Localize(locale string) string {
	return p.Value
}

type Msg400BadRequest struct {
	Reason ReasonText
}

// NewMsg400BadRequest creates a new Msg400BadRequest instance.
//
// Available localized templates:
//   - [en] "Bad request: {{.reason}}"
//   - [ja] "不正なリクエストです: {{.reason}}"
func NewMsg400BadRequest(reason ReasonText) Msg400BadRequest {
	return Msg400BadRequest{
		Reason: reason,
	}
}

func (m Msg400BadRequest) Localize(locale string) string {
	return renderTemplate(locale, "400BadRequest", templates["400BadRequest"], map[string]string{
		"reason": m.Reason.Localize(locale),
	})
}

type EntityNotFound struct {
	Entity EntityText
	Reason ReasonText
}

// NewEntityNotFound creates a new EntityNotFound instance.
//
// Available localized templates:
//   - [en] "{{.entity}} not found: {{.reason}}"
//   - [ja] "{{.entity}}が見つかりません: {{.reason}}"
func NewEntityNotFound(entity EntityText, reason ReasonText) EntityNotFound {
	return EntityNotFound{
		Entity: entity,
		Reason: reason,
	}
}

func (m EntityNotFound) Localize(locale string) string {
	return renderTemplate(locale, "EntityNotFound", templates["EntityNotFound"], map[string]string{
		"entity": m.Entity.Localize(locale),
		"reason": m.Reason.Localize(locale),
	})
}

type UserAlreadyExists struct {
	Entity EntityText
	UserId UserIdValue
}

// NewUserAlreadyExists creates a new UserAlreadyExists instance.
//
// Available localized templates:
//   - [en] "{{.entity}} already exists: {{.user_id}}"
//   - [ja] "{{.entity}}はすでに存在します: {{.user_id}}"
func NewUserAlreadyExists(entity EntityText, userId UserIdValue) UserAlreadyExists {
	return UserAlreadyExists{
		Entity: entity,
		UserId: userId,
	}
}

func (m UserAlreadyExists) Localize(locale string) string {
	return renderTemplate(locale, "UserAlreadyExists", templates["UserAlreadyExists"], map[string]string{
		"entity":  m.Entity.Localize(locale),
		"user_id": m.UserId.Localize(locale),
	})
}
