// Code generated by i18ngen. DO NOT EDIT.
package i18n

import (
	"fmt"
	"strings"
	"sync"

	"github.com/nicksnyder/go-i18n/v2/i18n"
	"golang.org/x/text/language"
	"gopkg.in/yaml.v3"
)

// Bundle and localizer management
var (
	bundle      *i18n.Bundle
	localizers  = make(map[string]*i18n.Localizer)
	localizerMu sync.RWMutex
)

// Message data embedded in the binary
var messageData = map[string][]byte{
	"en": []byte(`400BadRequest: "Bad request: {{.reason}}"
CorrectTransfer: "Transfer from {{.user:from}} to {{.user:to}}"
EntityNotFound: "{{.entity}} not found: {{.reason}}"
TransferMessage: "Moved from {{.entity:from}} to {{.entity:to}}"
UserAlreadyExists: "{{.entity}} already exists: {{.user_id}}"
UserWelcome: "{{.name:user}}, approved by {{.name:admin}}"
ValidationError: "{{.field:input | title}} validation error for {{.field:display}}"
WelcomeMessage: "Welcome {{.name:user}}, to {{.name:owner}}'s account!"
`),
	"ja": []byte(`400BadRequest: "不正なリクエストです: {{.reason}}"
CorrectTransfer: "{{.user:from}}から{{.user:to}}への転送"
EntityNotFound: "{{.entity}}が見つかりません: {{.reason}}"
TransferMessage: "{{.entity:from}}から{{.entity:to}}へ移動しました"
UserAlreadyExists: "{{.entity}}はすでに存在します: {{.user_id}}"
UserWelcome: "{{.name:user}}さん、{{.name:admin}}によって承認されました"
ValidationError: "{{.field:input}}の{{.field:display | upper}}検証エラーです"
WelcomeMessage: "{{.name:user}}さん、{{.name:owner}}さんのアカウントへようこそ！"
`),
}

// Placeholder data embedded in the binary
var placeholderData = map[string]map[string]string{
	"product": {
		"en": "Product",
		"ja": "製品",
	},
	"user": {
		"en": "User",
		"ja": "ユーザー",
	},
	"already_deleted": {
		"en": "already deleted",
		"ja": "すでに削除されています",
	},
}

func init() {
	bundle = i18n.NewBundle(language.English)
	bundle.RegisterUnmarshalFunc("yaml", yaml.Unmarshal)

	// Load messages from embedded data
	for locale, data := range messageData {
		bundle.MustParseMessageFileBytes(data, locale+".yaml")
	}
}

// getLocalizer returns a cached localizer for the given locale
func getLocalizer(locale string) *i18n.Localizer {
	localizerMu.RLock()
	if localizer, exists := localizers[locale]; exists {
		localizerMu.RUnlock()
		return localizer
	}
	localizerMu.RUnlock()

	localizerMu.Lock()
	defer localizerMu.Unlock()

	// Double-check pattern
	if localizer, exists := localizers[locale]; exists {
		return localizer
	}

	localizer := i18n.NewLocalizer(bundle, locale)
	localizers[locale] = localizer
	return localizer
}

// localizeMessage renders a message using go-i18n
func localizeMessage(messageID string, templateData map[string]interface{}, locale string) string {
	localizer := getLocalizer(locale)

	result, err := localizer.Localize(&i18n.LocalizeConfig{
		MessageID:    messageID,
		TemplateData: templateData,
	})

	if err != nil {
		// Return error message in a recognizable format
		return fmt.Sprintf("[Localization error for %s.%s: %s]", messageID, locale, err.Error())
	}

	return result
}

// localizeWithFields is a helper function for simple field-based localization
func localizeWithFields(messageID, locale string, fields map[string]string) string {
	return localizeMessage(messageID, buildTemplateData(messageID, locale, fields), locale)
}

// buildTemplateData constructs template data with template function processing
func buildTemplateData(messageID, locale string, fields map[string]string) map[string]interface{} {
	result := make(map[string]interface{}, len(fields)) // Pre-allocate capacity

	for fieldName, value := range fields {
		result[fieldName] = processField(value, messageID, fieldName, locale)
	}

	return result
}

// processField applies template functions to a field value
func processField(value, messageID, fieldName, locale string) string {
	if functions, exists := templateFunctions[messageID]; exists {
		if localeFunctions, exists := functions[locale]; exists {
			if fieldFunctions, exists := localeFunctions[fieldName]; exists {
				return applyTemplateFunctions(value, fieldFunctions)
			}
		}
	}
	return value
}

// applyTemplateFunctions applies a series of template functions to a value
func applyTemplateFunctions(value string, functions []string) string {
	if len(functions) == 0 {
		return value
	}

	result := value
	for _, fn := range functions {
		switch fn {
		case "title":
			if len(result) > 0 {
				var builder strings.Builder
				builder.Grow(len(result))
				builder.WriteString(strings.ToUpper(result[:1]))
				builder.WriteString(result[1:])
				result = builder.String()
			}
		case "upper":
			result = strings.ToUpper(result)
		case "lower":
			result = strings.ToLower(result)
		}
	}
	return result
}

// Template function metadata
var templateFunctions = map[string]map[string]map[string][]string{
	"400BadRequest": {
		"en": {},
		"ja": {},
	},
	"CorrectTransfer": {
		"en": {},
		"ja": {},
	},
	"EntityNotFound": {
		"en": {},
		"ja": {},
	},
	"TransferMessage": {
		"en": {},
		"ja": {},
	},
	"UserAlreadyExists": {
		"en": {},
		"ja": {},
	},
	"UserWelcome": {
		"en": {},
		"ja": {},
	},
	"ValidationError": {
		"en": {
			"fieldInput": {"title"},
		},
		"ja": {
			"fieldDisplay": {"upper"},
		},
	},
	"WelcomeMessage": {
		"en": {},
		"ja": {},
	},
}

// Localizable interface for all i18n types
type Localizable interface {
	Localize(locale string) string
	ID() string
}

type EntityText struct {
	id string
}

// NewEntityText creates a new EntityText instance
func NewEntityText(id string) EntityText {
	return EntityText{id: id}
}

func (p EntityText) Localize(locale string) string {
	// Use embedded placeholder data for localization
	if templates, exists := placeholderData[p.id]; exists {
		if localized, exists := templates[locale]; exists {
			return localized
		}
		// Fallback to any available locale
		for _, text := range templates {
			return text
		}
	}
	// Final fallback to ID
	return p.id
}

func (p EntityText) ID() string {
	return p.id
}

// EntityTexts provides utility access to EntityText instances
var EntityTexts = struct {
	User    EntityText
	Product EntityText
}{
	User:    EntityText{id: "user"},
	Product: EntityText{id: "product"},
}

type FieldValue struct {
	Value string
}

// NewFieldValue creates a new FieldValue instance
func NewFieldValue(value string) FieldValue {
	return FieldValue{Value: value}
}

func (p FieldValue) Localize(locale string) string {
	return p.Value
}

func (p FieldValue) ID() string {
	return "field"
}

type NameValue struct {
	Value string
}

// NewNameValue creates a new NameValue instance
func NewNameValue(value string) NameValue {
	return NameValue{Value: value}
}

func (p NameValue) Localize(locale string) string {
	return p.Value
}

func (p NameValue) ID() string {
	return "name"
}

type ReasonText struct {
	id string
}

// NewReasonText creates a new ReasonText instance
func NewReasonText(id string) ReasonText {
	return ReasonText{id: id}
}

func (p ReasonText) Localize(locale string) string {
	// Use embedded placeholder data for localization
	if templates, exists := placeholderData[p.id]; exists {
		if localized, exists := templates[locale]; exists {
			return localized
		}
		// Fallback to any available locale
		for _, text := range templates {
			return text
		}
	}
	// Final fallback to ID
	return p.id
}

func (p ReasonText) ID() string {
	return p.id
}

// ReasonTexts provides utility access to ReasonText instances
var ReasonTexts = struct {
	AlreadyDeleted ReasonText
}{
	AlreadyDeleted: ReasonText{id: "already_deleted"},
}

type UserIdValue struct {
	Value string
}

// NewUserIdValue creates a new UserIdValue instance
func NewUserIdValue(value string) UserIdValue {
	return UserIdValue{Value: value}
}

func (p UserIdValue) Localize(locale string) string {
	return p.Value
}

func (p UserIdValue) ID() string {
	return "user_id"
}

type Msg400BadRequest struct {
	Reason ReasonText
}

// NewMsg400BadRequest creates a new Msg400BadRequest instance.
//
// Available localized templates:
//   - [en] "Bad request: {{.reason}}"
//   - [ja] "不正なリクエストです: {{.reason}}"
func NewMsg400BadRequest(reason ReasonText) Msg400BadRequest {
	return Msg400BadRequest{
		Reason: reason,
	}
}

func (m Msg400BadRequest) Localize(locale string) string {
	templateData := buildTemplateData("400BadRequest", locale, map[string]string{
		"reason": m.Reason.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "400BadRequest",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m Msg400BadRequest) ID() string {
	return "400BadRequest"
}

type CorrectTransfer struct {
	UserFrom EntityText
	UserTo   EntityText
}

// NewCorrectTransfer creates a new CorrectTransfer instance.
//
// Available localized templates:
//   - [en] "Transfer from {{.user:from}} to {{.user:to}}"
//   - [ja] "{{.user:from}}から{{.user:to}}への転送"
func NewCorrectTransfer(userFrom EntityText, userTo EntityText) CorrectTransfer {
	return CorrectTransfer{
		UserFrom: userFrom,
		UserTo:   userTo,
	}
}

func (m CorrectTransfer) Localize(locale string) string {
	templateData := buildTemplateData("CorrectTransfer", locale, map[string]string{
		"userFrom": m.UserFrom.Localize(locale),
		"userTo":   m.UserTo.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "CorrectTransfer",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m CorrectTransfer) ID() string {
	return "CorrectTransfer"
}

type EntityNotFound struct {
	Entity EntityText
	Reason ReasonText
}

// NewEntityNotFound creates a new EntityNotFound instance.
//
// Available localized templates:
//   - [en] "{{.entity}} not found: {{.reason}}"
//   - [ja] "{{.entity}}が見つかりません: {{.reason}}"
func NewEntityNotFound(entity EntityText, reason ReasonText) EntityNotFound {
	return EntityNotFound{
		Entity: entity,
		Reason: reason,
	}
}

func (m EntityNotFound) Localize(locale string) string {
	templateData := buildTemplateData("EntityNotFound", locale, map[string]string{
		"entity": m.Entity.Localize(locale),
		"reason": m.Reason.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "EntityNotFound",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m EntityNotFound) ID() string {
	return "EntityNotFound"
}

type TransferMessage struct {
	EntityFrom EntityText
	EntityTo   EntityText
}

// NewTransferMessage creates a new TransferMessage instance.
//
// Available localized templates:
//   - [en] "Moved from {{.entity:from}} to {{.entity:to}}"
//   - [ja] "{{.entity:from}}から{{.entity:to}}へ移動しました"
func NewTransferMessage(entityFrom EntityText, entityTo EntityText) TransferMessage {
	return TransferMessage{
		EntityFrom: entityFrom,
		EntityTo:   entityTo,
	}
}

func (m TransferMessage) Localize(locale string) string {
	templateData := buildTemplateData("TransferMessage", locale, map[string]string{
		"entityFrom": m.EntityFrom.Localize(locale),
		"entityTo":   m.EntityTo.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "TransferMessage",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m TransferMessage) ID() string {
	return "TransferMessage"
}

type UserAlreadyExists struct {
	Entity EntityText
	UserId UserIdValue
}

// NewUserAlreadyExists creates a new UserAlreadyExists instance.
//
// Available localized templates:
//   - [en] "{{.entity}} already exists: {{.user_id}}"
//   - [ja] "{{.entity}}はすでに存在します: {{.user_id}}"
func NewUserAlreadyExists(entity EntityText, userId UserIdValue) UserAlreadyExists {
	return UserAlreadyExists{
		Entity: entity,
		UserId: userId,
	}
}

func (m UserAlreadyExists) Localize(locale string) string {
	templateData := buildTemplateData("UserAlreadyExists", locale, map[string]string{
		"entity":  m.Entity.Localize(locale),
		"user_id": m.UserId.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "UserAlreadyExists",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m UserAlreadyExists) ID() string {
	return "UserAlreadyExists"
}

type UserWelcome struct {
	NameUser  NameValue
	NameAdmin NameValue
}

// NewUserWelcome creates a new UserWelcome instance.
//
// Available localized templates:
//   - [en] "{{.name:user}}, approved by {{.name:admin}}"
//   - [ja] "{{.name:user}}さん、{{.name:admin}}によって承認されました"
func NewUserWelcome(nameUser NameValue, nameAdmin NameValue) UserWelcome {
	return UserWelcome{
		NameUser:  nameUser,
		NameAdmin: nameAdmin,
	}
}

func (m UserWelcome) Localize(locale string) string {
	templateData := buildTemplateData("UserWelcome", locale, map[string]string{
		"nameUser":  m.NameUser.Localize(locale),
		"nameAdmin": m.NameAdmin.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "UserWelcome",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m UserWelcome) ID() string {
	return "UserWelcome"
}

type ValidationError struct {
	FieldInput   FieldValue
	FieldDisplay FieldValue
}

// NewValidationError creates a new ValidationError instance.
//
// Available localized templates:
//   - [en] "{{.field:input | title}} validation error for {{.field:display}}"
//   - [ja] "{{.field:input}}の{{.field:display | upper}}検証エラーです"
func NewValidationError(fieldInput FieldValue, fieldDisplay FieldValue) ValidationError {
	return ValidationError{
		FieldInput:   fieldInput,
		FieldDisplay: fieldDisplay,
	}
}

func (m ValidationError) Localize(locale string) string {
	templateData := buildTemplateData("ValidationError", locale, map[string]string{
		"fieldInput":   m.FieldInput.Localize(locale),
		"fieldDisplay": m.FieldDisplay.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "ValidationError",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m ValidationError) ID() string {
	return "ValidationError"
}

type WelcomeMessage struct {
	NameUser  NameValue
	NameOwner NameValue
}

// NewWelcomeMessage creates a new WelcomeMessage instance.
//
// Available localized templates:
//   - [en] "Welcome {{.name:user}}, to {{.name:owner}}'s account!"
//   - [ja] "{{.name:user}}さん、{{.name:owner}}さんのアカウントへようこそ！"
func NewWelcomeMessage(nameUser NameValue, nameOwner NameValue) WelcomeMessage {
	return WelcomeMessage{
		NameUser:  nameUser,
		NameOwner: nameOwner,
	}
}

func (m WelcomeMessage) Localize(locale string) string {
	templateData := buildTemplateData("WelcomeMessage", locale, map[string]string{
		"nameUser":  m.NameUser.Localize(locale),
		"nameOwner": m.NameOwner.Localize(locale),
	})

	config := &i18n.LocalizeConfig{
		MessageID:    "WelcomeMessage",
		TemplateData: templateData,
	}

	localizer := getLocalizer(locale)
	return localizer.MustLocalize(config)
}

func (m WelcomeMessage) ID() string {
	return "WelcomeMessage"
}
