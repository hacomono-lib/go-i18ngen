name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build for multiple platforms
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=amd64 go build -o dist/i18ngen-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -o dist/i18ngen-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -o dist/i18ngen-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o dist/i18ngen-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -o dist/i18ngen-windows-amd64.exe .
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from git log since last tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        # Create release notes
        cat > RELEASE_NOTES.md << EOF
        ## Installation
        \`\`\`bash
        go install github.com/hacomono-lib/go-i18ngen@$VERSION
        \`\`\`
        
        ## What's Changed
        $CHANGELOG
        EOF
        
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create or Update Release
      run: |
        if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
          echo "Release ${{ github.ref_name }} already exists, uploading assets..."
          gh release upload ${{ github.ref_name }} dist/* --clobber
        else
          echo "Creating new release ${{ github.ref_name }}..."
          gh release create ${{ github.ref_name }} \
            --title "${{ github.ref_name }}" \
            --notes "${{ steps.release_notes.outputs.release_notes }}" \
            dist/*
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 